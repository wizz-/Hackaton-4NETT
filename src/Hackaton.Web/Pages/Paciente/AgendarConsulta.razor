@page "/paciente/agendar-consulta"
@inject NavigationManager Navigation

<PageTitle>Agendar Consulta - Health&Med</PageTitle>

<div class="d-flex align-items-center px-3 py-2 header-bar">
    <div class="me-auto">
        <img src="img/logo-50.png" alt="Health&Med" class="logo-img">
    </div>

    <div class="flex-grow-1 text-center">
        <span class="fw-bold fs-4">Agendar Consulta</span>
    </div>

    <div class="ms-auto d-flex align-items-center">
        <i class="bi bi-person-circle user-icon me-2 icone-usuario-logado"></i>
        <span class="user-name">Paciente Logado</span>
    </div>
</div>

<h5 class="mt-4 mb-3">1. Escolha uma especialidade e/ou um médico</h5>

<div class="row mb-4">
    <!-- Especialidade -->
    <div class="col-md-6 mb-3 position-relative">
        <label class="form-label fw-semibold">Especialidade</label>
        <InputText class="form-control"
            placeholder="Ex: Cardiologia"
            @bind-Value="filtro.Especialidade"
            @oninput="OnInputEspecialidade"
            @onfocus="OnFocusEspecialidade"
            @onblur="OnBlurEspecialidade" />
        @if (sugestoesEspecialidade?.Any() == true && focoEspecialidade)
        {
            <ul class="list-group position-absolute w-100 z-index-3">
                @foreach (var item in sugestoesEspecialidade)
                {
                    <li class="list-group-item list-group-item-action"
                        style="cursor:pointer"
                        @onmousedown="() => SelecionarEspecialidade(item)">
                        @item
                    </li>
                }
            </ul>
        }
    </div>

    <!-- Médico -->
    <div class="col-md-6 mb-3 position-relative">
        <label class="form-label fw-semibold">Nome do Médico</label>
        <InputText class="form-control"
            placeholder="Ex: Ana, Bruno..."
            @bind-Value="filtro.NomeMedico"
            @oninput="OnInputMedico"
            @onfocus="OnFocusMedico"
            @onblur="OnBlurMedico" />
        @if (sugestoesMedico?.Any() == true && focoMedico)
        {
            <ul class="list-group position-absolute w-100 z-index-3">
                @foreach (var item in sugestoesMedico)
                {
                    <li class="list-group-item list-group-item-action"
                        style="cursor:pointer"
                        @onmousedown="() => SelecionarMedicoPorNome(item)">
                        @item
                    </li>
                }
            </ul>
        }
    </div>
</div>

@if (medicoSelecionado is not null && !agendaCarregada)
{
    <div class="row mb-4">
        <div class="col-md-4">
            <label class="form-label fw-semibold">Data de início da agenda</label>
            <InputDate class="form-control" @bind-Value="dataInicio" />
        </div>
        <div class="col-md-4 d-flex align-items-end">
            <button class="btn btn-primary" @onclick="BuscarAgenda">
                <i class="bi bi-calendar-event"></i> Buscar Agenda
            </button>
        </div>
        <div class="col-md-4 d-flex align-items-end justify-content-end">
            <button class="btn btn-outline-secondary" @onclick="DesfazerSelecaoMedico">
                <i class="bi bi-arrow-left"></i> Escolher outro médico
            </button>
        </div>
    </div>
}

@if (agendaCarregada && medicoSelecionado is not null)
{
    <h5 class="mb-3">2. Escolha um horário</h5>

    @if (agendaAgrupada?.Any() == true)
    {
        <div class="table-responsive">
            <table class="table table-bordered text-center align-middle">
                <thead class="table-light">
                    <tr>
                        @foreach (var dia in agendaAgrupada.Keys.Order())
                        {
                            <th>@dia.ToString("dddd, dd/MM", new System.Globalization.CultureInfo("pt-BR"))</th>
                        }
                    </tr>
                </thead>
                <tbody>
                    @foreach (var horario in horariosPorDia)
                    {
                        <tr>
                            @foreach (var dia in agendaAgrupada.Keys.Order())
                            {
                                var horarioCompleto = dia.Add(horario);
                                bool disponivel = agendaAgrupada[dia].Contains(horarioCompleto);

                                <td>
                                    @if (disponivel)
                                    {
                                        <button class="btn btn-sm btn-outline-primary"
                                                @onclick="@(() => SelecionarHorario(horarioCompleto))">
                                            @horarioCompleto.ToString("HH:mm")
                                        </button>
                                    }
                                    else
                                    {
                                        <span class="text-muted">—</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
    else
    {
        <div class="alert alert-info">Este médico ainda não possui horários disponíveis.</div>
    }

    <div class="mt-3">
        <button class="btn btn-outline-secondary" @onclick="DesfazerSelecaoMedico">
            <i class="bi bi-arrow-left"></i> Escolher outro médico
        </button>
    </div>
}

@if (horarioSelecionado is not null)
{
    <div class="mt-4 text-center">
        <h5>Confirmar agendamento</h5>
        <p>Você está agendando com <strong>@medicoSelecionado?.Nome</strong> em <strong>@horarioSelecionado?.ToString("dd/MM/yyyy HH:mm")</strong></p>
        <button class="btn btn-success" @onclick="ConfirmarAgendamento">
            <i class="bi bi-check-circle me-1"></i> Confirmar Consulta
        </button>
    </div>
}

<div class="mt-5">
    <button class="btn btn-outline-primary" @onclick="@(() => Navigation.NavigateTo("/paciente"))">
        <i class="bi bi-arrow-left"></i> Voltar
    </button>
</div>

@code {
    private FiltroBuscaMedico filtro = new();
    private MedicoResumo? medicoSelecionado;
    private DateTime? horarioSelecionado;
    private DateTime dataInicio = DateTime.Today;
    private bool agendaCarregada = false;
    private bool focoEspecialidade = false;
    private bool focoMedico = false;

    private List<DateTime>? agenda;
    private Dictionary<DateTime, List<DateTime>> agendaAgrupada = new();

    private List<TimeSpan> horariosPorDia = new()
    {
        new TimeSpan(9, 0, 0),
        new TimeSpan(10, 0, 0),
        new TimeSpan(11, 0, 0)
    };

    private List<string> todasEspecialidades = new() { "Cardiologia", "Ortopedia", "Dermatologia" };
    private List<string> sugestoesEspecialidade = new();

    private List<string> todosNomesMedicos = new() { "Dra. Ana Cardoso", "Dr. Bruno Lima", "Dra. Carla Mendes" };
    private List<string> sugestoesMedico = new();

    private List<MedicoResumo> todosMedicos = new()
    {
        new() { Id = Guid.NewGuid(), Nome = "Dra. Ana Cardoso", Especialidade = "Cardiologia" },
        new() { Id = Guid.NewGuid(), Nome = "Dr. Bruno Lima", Especialidade = "Ortopedia" },
        new() { Id = Guid.NewGuid(), Nome = "Dra. Carla Mendes", Especialidade = "Dermatologia" }
    };

    private void OnInputEspecialidade(ChangeEventArgs e)
    {
        var texto = e.Value?.ToString() ?? string.Empty;
        sugestoesEspecialidade = todasEspecialidades
            .Where(e => e.StartsWith(texto, StringComparison.InvariantCultureIgnoreCase))
            .Take(5)
            .ToList();
    }

    private void OnFocusEspecialidade(FocusEventArgs e)
    {
        focoEspecialidade = true;
        MostrarTodasEspecialidades(e);
    }

    private void MostrarTodasEspecialidades(FocusEventArgs e)
    {
        sugestoesEspecialidade = todasEspecialidades.ToList();
    }

    private void OnBlurEspecialidade(FocusEventArgs e)
    {        
        focoEspecialidade = false;
    }

    private void SelecionarEspecialidade(string especialidade)
    {
        filtro.Especialidade = especialidade;
        sugestoesEspecialidade.Clear();
    }

    private void OnFocusMedico(FocusEventArgs e)
    {
        focoMedico = true;        
        var textoAtual = filtro.NomeMedico;
        OnInputMedico(new ChangeEventArgs { Value = textoAtual });
    }

    private void OnInputMedico(ChangeEventArgs e)
    {
        var texto = e.Value?.ToString() ?? string.Empty;

        // Se houver especialidade selecionada, filtra só os médicos dessa especialidade
        var medicosFiltrados = string.IsNullOrWhiteSpace(filtro.Especialidade)
            ? todosMedicos
            : todosMedicos.Where(m => m.Especialidade.Equals(filtro.Especialidade, StringComparison.InvariantCultureIgnoreCase));

        sugestoesMedico = medicosFiltrados
            .Where(m => m.Nome.Contains(texto, StringComparison.InvariantCultureIgnoreCase))
            .Select(m => m.Nome)
            .Distinct()
            .Take(5)
            .ToList();
    }    

    private void OnBlurMedico(FocusEventArgs e)
    {
        focoMedico = false;
    }

    private void MostrarTodosMedicos(FocusEventArgs e)
    {
        sugestoesMedico = todosNomesMedicos.ToList();
    }

    private void SelecionarMedicoPorNome(string nome)
    {
        filtro.NomeMedico = nome;
        sugestoesMedico.Clear();

        medicoSelecionado = todosMedicos.FirstOrDefault(m => m.Nome == nome);
        agendaCarregada = false;
        agendaAgrupada.Clear();
        horarioSelecionado = null;
    }

    private void DesfazerSelecaoMedico()
    {
        medicoSelecionado = null;
        agendaCarregada = false;
        filtro.NomeMedico = string.Empty;
        dataInicio = DateTime.Today;
    }
    
    private async Task BuscarAgenda()
    {
        if (medicoSelecionado is null)
            return;

        await Task.Delay(300); // simulação

        agenda = Enumerable.Range(0, 7)
            .SelectMany(d => horariosPorDia.Select(h => dataInicio.AddDays(d).Add(h)))
            .ToList();

        agendaAgrupada = agenda
            .GroupBy(a => a.Date)
            .ToDictionary(g => g.Key, g => g.ToList());

        horarioSelecionado = null;
        agendaCarregada = true;
    }

    private void SelecionarHorario(DateTime horario)
    {
        horarioSelecionado = horario;
    }

    private async Task ConfirmarAgendamento()
    {
        if (medicoSelecionado is null || horarioSelecionado is null) return;

        await Task.Delay(400);
        Navigation.NavigateTo("/paciente/consultas");
    }

    private class FiltroBuscaMedico
    {
        public string Especialidade { get; set; } = string.Empty;
        public string NomeMedico { get; set; } = string.Empty;
    }

    private class MedicoResumo
    {
        public Guid Id { get; set; }
        public string Nome { get; set; } = string.Empty;
        public string Especialidade { get; set; } = string.Empty;
    }
}
