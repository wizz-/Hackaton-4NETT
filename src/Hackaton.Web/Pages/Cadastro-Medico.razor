@page "/cadastro-medico"
@layout BlankLayout

@using Hackaton.Web.Models
@using System.Linq.Expressions
@using Hackaton.Web.Services.Especialidades.Interfaces
@using Hackaton.Web.Services.Ufs.Interfaces

@inject NavigationManager Navigation
@inject IUfService UfService
@inject IEspecialidadeService EspecialidadeService

<PageTitle>Cadastro de Médico - Health&Med</PageTitle>

<div class="text-center mb-4">
    <img src="img/logo-100.png" alt="Health&Med" class="logo">
</div>

<h1 class="mb-4 text-center">Cadastro de Médico</h1>

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleCadastro">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="nome-completo" class="form-label required-label">Nome completo</label>
            <InputText id="nome-completo" class="@ObterClasseCss(() => cadastroModel.NomeCompleto)" @bind-Value="cadastroModel.NomeCompleto" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.NomeCompleto)" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-md-5">
                <label for="crm" class="form-label required-label">CRM</label>
                <RadzenMask Mask="******" CharacterPattern="[0-9]" Name="crm" Placeholder="______" @bind-Value="cadastroModel.CRM" class="@ObterClasseCss(() => cadastroModel.CRM)" Style="width: 100%;" />
                <div class="invalid-feedback">
                    <ValidationMessage For="@(() => cadastroModel.CRM)" />
                </div>
            </div>
            <div class="col-md-7">
                <label for="uf" class="form-label required-label">UF</label>
                <InputSelect id="uf" class="@ObterClasseCss(() => cadastroModel.UF, "form-select")" @bind-Value="cadastroModel.UF">
                    <option value="">Selecione o estado</option>
                    @foreach (var uf in Ufs)
                    {
                        <option value="@uf">@uf</option>
                    }
                </InputSelect>
                <div class="invalid-feedback">
                    <ValidationMessage For="@(() => cadastroModel.UF)" />
                </div>
            </div>
        </div>

        <div class="mb-3">
            <label for="especialidade" class="form-label required-label">Especialidade</label>
            <InputSelect id="especialidade"
                         class="@ObterClasseCss(() => cadastroModel.EspecialidadeId!, "form-select")"
                         @bind-Value="cadastroModel.EspecialidadeId">
                <option value="">Selecione a especialidade</option>
                @foreach (var esp in Especialidades)
                {
                    <option value="@esp.Id">@esp.Nome</option>
                }
            </InputSelect>
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.EspecialidadeId)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="senha" class="form-label required-label">Senha</label>
            <InputText id="senha" type="password" class="@ObterClasseCss(() => cadastroModel.Senha)" @bind-Value="cadastroModel.Senha" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.Senha)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="repetir-senha" class="form-label required-label">Repita a senha</label>
            <InputText id="repetir-senha" type="password" class="@ObterClasseCss(() => cadastroModel.RepetirSenha)" @bind-Value="cadastroModel.RepetirSenha" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.RepetirSenha)" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensagemErro))
        {
            <div class="alert alert-danger text-center">@mensagemErro</div>
        }

        <button type="submit" class="btn btn-primary w-100">
            <i class="bi bi-floppy me-1"></i> Cadastrar
        </button>

        <div class="text-center mt-3">
            <a href="/login" class="text-decoration-none">Voltar</a>
        </div>
    </EditForm>
}

@code {
    private CadastroMedicoModel cadastroModel = new();
    private EditContext? editContext;
    private string mensagemErro = "";

    private List<string> Ufs = [];
    private List<EspecialidadeModel> Especialidades = [];

    protected override async Task OnInitializedAsync()
    {
        Ufs = await UfService.ObterUfAsync();
        Especialidades = await EspecialidadeService.ObterEspecialidadesAsync();
        editContext = new EditContext(cadastroModel);
    }

    private async Task HandleCadastro()
    {
        mensagemErro = "";

        if (cadastroModel.CRM == "000000")
        {
            mensagemErro = "Este CRM já está em uso.";
            return;
        }

        Navigation.NavigateTo("/cadastro-sucesso");
    }

    private string ObterClasseCss(Expression<Func<object>> accessor, string baseClass = "form-control")
    {
        var field = FieldIdentifier.Create(accessor);
        return editContext!.GetValidationMessages(field).Any()
            ? $"{baseClass} is-invalid"
            : baseClass;
    }
}
