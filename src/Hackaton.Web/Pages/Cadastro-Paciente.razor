@page "/cadastro-paciente"
@layout BlankLayout

@using System.Linq.Expressions
@using Hackaton.Web.Models
@using Hackaton.Web.Models.Paciente

@inject NavigationManager Navigation

<PageTitle>Cadastro de Paciente - Health&Med</PageTitle>

<div class="text-center mb-4">
    <img src="img/logo-100.png" alt="Health&Med" class="logo">
</div>

<h1 class="mb-4 text-center">Cadastro de Paciente</h1>

@if (editContext != null)
{
    <EditForm EditContext="@editContext" OnValidSubmit="HandleCadastro">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="nome" class="form-label required-label">Nome completo</label>
            <InputText id="nome" class="@ObterClasseCss(() => cadastroModel.NomeCompleto)" @bind-Value="cadastroModel.NomeCompleto" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.NomeCompleto)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="cpf" class="form-label required-label">CPF</label>
            <RadzenMask Mask="***********" CharacterPattern="[0-9]" Name="cpf" Placeholder="___________"
                        @bind-Value="cadastroModel.CPF" class="@ObterClasseCss(() => cadastroModel.CPF)" Style="width: 100%;" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.CPF)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="email" class="form-label required-label">E-mail</label>
            <InputText id="email" class="@ObterClasseCss(() => cadastroModel.Email)" @bind-Value="cadastroModel.Email" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.Email)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="senha" class="form-label required-label">Senha</label>
            <InputText id="senha" type="password" class="@ObterClasseCss(() => cadastroModel.Senha)" @bind-Value="cadastroModel.Senha" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.Senha)" />
            </div>
        </div>

        <div class="mb-3">
            <label for="repetir-senha" class="form-label required-label">Repita a senha</label>
            <InputText id="repetir-senha" type="password" class="@ObterClasseCss(() => cadastroModel.RepetirSenha)" @bind-Value="cadastroModel.RepetirSenha" />
            <div class="invalid-feedback">
                <ValidationMessage For="@(() => cadastroModel.RepetirSenha)" />
            </div>
        </div>

        @if (!string.IsNullOrEmpty(mensagemErro))
        {
            <div class="alert alert-danger text-center">@mensagemErro</div>
        }

        <button type="submit" class="btn btn-primary w-100">
            <i class="bi bi-floppy me-1"></i> Cadastrar
        </button>

        <div class="d-flex justify-content-start mb-3 my-3">
            <a href="/login" class="btn btn-outline-primary w-100">
                <i class="bi bi-arrow-left"></i> Voltar
            </a>
        </div>
    </EditForm>
}

@code {
    private PacienteModel cadastroModel = new();
    private EditContext? editContext;
    private string mensagemErro = "";

    protected override void OnInitialized()
    {
        editContext = new EditContext(cadastroModel);
    }

    private async Task HandleCadastro()
    {
        mensagemErro = "";

        if (cadastroModel.CPF == "00000000000")
        {
            mensagemErro = "Este CPF já está em uso.";
            return;
        }

        Navigation.NavigateTo("/cadastro-sucesso");
    }

    private string ObterClasseCss(Expression<Func<object>> accessor, string baseClass = "form-control")
    {
        var field = FieldIdentifier.Create(accessor);
        return editContext!.GetValidationMessages(field).Any()
            ? $"{baseClass} is-invalid"
            : baseClass;
    }
}
