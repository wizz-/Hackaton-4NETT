@page "/medico/meu-cadastro"
@using System.Globalization
@using Hackaton.Web.Components.Shared
@using Hackaton.Web.Models.Especialidade
@using Hackaton.Web.Models.Medico
@using Hackaton.Web.Services.Autenticacao
@using Hackaton.Web.Services.Autenticacao.Interfaces
@using Hackaton.Web.Services.Especialidades.Interfaces
@using Hackaton.Web.Services.Medicos.Interfaces

@inject IConsultaAutenticacaoService ConsultaAutenticacaoService
@inject NavigationManager Navigation
@inject IEspecialidadeService EspecialidadeService
@inject IMedicoService MedicoService

<PageTitle>Meu Cadastro - Health&Med</PageTitle>
<Spinner Exibir="carregando" />

@if (!carregando)
{
    <div class="d-flex align-items-center px-3 py-2 header-bar">
        <div class="me-auto">
            <img src="img/logo-50.png" alt="Health&Med" class="logo-img">
        </div>

        <div class="flex-grow-1 text-center">
            <span class="fw-bold fs-4">Meu Cadastro</span>
        </div>

        <div class="ms-auto d-flex align-items-center">
            <i class="bi bi-person-circle user-icon me-2 icone-usuario-logado"></i>
            <span class="user-name">Thiago Rosa</span>
        </div>
    </div>

    <div class="container my-4">

        <div class="row mb-4">
            <div class="col-md-6">
                <label class="form-label">Nome do Médico</label>
                <InputText @bind-Value="cadastroModel.Nome" class="form-control" disabled />
            </div>
            <div class="col-md-3">
                <label class="form-label">CRM</label>
                <InputText @bind-Value="cadastroModel.CrmNumero" class="form-control" disabled />
            </div>
            <div class="col-md-3">
                <label class="form-label">Estado (UF)</label>
                <InputText @bind-Value="cadastroModel.CrmUf" class="form-control" disabled />
            </div>
        </div>

        <EditForm Model="@cadastroModel" OnValidSubmit="SalvarCadastro">
            <DataAnnotationsValidator />

            <div class="row mb-4">
                <div class="col-md-6">
                    <label class="form-label">Especialidade</label>
                    <InputSelect class="form-select" @bind-Value="cadastroModel.Especialidade">
                        <option value="">Selecione...</option>
                        @foreach (var esp in Especialidades)
                        {
                            <option value="@esp">@esp</option>
                        }
                    </InputSelect>
                </div>            
                <div class="col-md-6">
                    <label class="form-label">Valor da Consulta (R$)</label>
                    <InputText @bind-Value="valorFormatado" class="form-control" @oninput="FormatarValor" />
                </div>            
            </div>

            <hr />
            <h5 class="mb-3">Disponibilidade Semanal</h5>

            <div class="row g-3 align-items-end mb-3">
                <div class="col-md-4">
                    <label class="form-label">Dia da Semana</label>
                    <InputSelect class="form-select" @bind-Value="novoHorario.DiaDaSemana">
                        <option value="">Selecione</option>
                        @foreach (var dia in Enumerable.Range(1, 7))
                        {
                            <option value="@dia">@ObterNomeDoDia(dia)</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Início</label>
                    <InputSelect class="form-select"
                    TValue="string"
                    Value="@novoHorario.Inicio"
                    ValueChanged="@OnInicioChanged"
                    ValueExpression="() => novoHorario.Inicio">
                        <option value="">Selecione</option>
                        @foreach (var h in HorariosDisponiveis)
                        {
                            <option value="@h">@h</option>
                        }
                    </InputSelect>
                </div>

                <div class="col-md-3">
                    <label class="form-label">Fim</label>
                    <InputSelect class="form-select" @bind-Value="novoHorario.Fim">
                        <option value="">Selecione</option>
                        @foreach (var h in HorariosFimDisponiveis)
                        {
                            <option value="@h">@h</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-2">
                    <button type="button" class="btn btn-outline-primary w-100" @onclick="AdicionarHorario">
                        <i class="bi bi-plus-circle"></i>
                    </button>
                </div>
            </div>

            <div class="table-responsive">
                <table class="table table-bordered mt-3">
                    <thead class="table-light">
                        <tr>
                            @foreach (var dia in Enumerable.Range(1, 7))
                            {
                                <th class="text-center">@ObterNomeDoDia(dia)</th>
                            }
                        </tr>
                    </thead>
                    <tbody>
                        <tr>
                            @foreach (var dia in Enumerable.Range(1, 7))
                            {
                                <td>
                                    @foreach (var h in cadastroModel.Horarios.Where(h => h.DiaDaSemana == dia))
                                    {
                                        <div class="horario-badge">
                                            <span>@h.Inicio - @h.Fim</span>
                                            <button type="button"
                                            class="btn-fechar"
                                            title="Remover horário"
                                            @onclick="() => RemoverHorario(h)">
                                                <i class="bi bi-x-lg"></i>
                                            </button>
                                        </div>
                                    }
                                </td>
                            }
                        </tr>
                    </tbody>
                </table>
            </div>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary">
                    <i class="bi bi-floppy me-1"></i> Salvar Cadastro
                </button>
                <button type="button" class="btn btn-outline-primary ms-2" @onclick="@(() => Navigation.NavigateTo("/medico"))">
                    <i class="bi bi-arrow-left-circle me-1"></i> Voltar
                </button>
            </div>
        </EditForm>
    </div>
}
@code {
    private bool carregando = true;
    private List<EspecialidadeModel> Especialidades = [];
    private EditContext? editContext;


    protected override async Task OnInitializedAsync()
    {
        carregando = true;

        try
        {
            var claims = await ConsultaAutenticacaoService.ObterClaimsDoUsuarioLogadoAsync();

            var id = claims.First(x => x.Key == "nameid").Value;
            var medico = MedicoService.ObterMedico(Convert.ToInt32(id));

            var tarefaEspecialidades = EspecialidadeService.ObterEspecialidadesAsync();

            await Task.WhenAll(medico, tarefaEspecialidades);

            Especialidades = await tarefaEspecialidades;

            editContext = new EditContext(medico);
        }
        finally
        {
            carregando = false;
        }
    }

    protected override void OnInitialized()
    {
        HorariosFimDisponiveis = new List<string>(HorariosDisponiveis);
    }

    private MeuCadastroMedicoModel cadastroModel = new()
    {
        Nome = "Thiago Rosa",
        CrmNumero = "123456",
        CrmUf = "SP"
    };

    private MeuCadastroNovoHorarioModel novoHorario = new();

    private string valorFormatado = "R$ 0,00";

    private void FormatarValor(ChangeEventArgs e)
    {
        var texto = e.Value?.ToString() ?? "0";

        // Remove tudo que não é número
        var numeros = new string(texto.Where(char.IsDigit).ToArray());

        if (decimal.TryParse(numeros, out var valorNumerico))
        {
            // Divide por 100 para ter centavos
            var valorDecimal = valorNumerico / 100m;

            // Atualiza o campo formatado
            valorFormatado = valorDecimal.ToString("C", new CultureInfo("pt-BR"));

            // Armazena no modelo em decimal
            cadastroModel.ValorDaConsulta = valorDecimal;
        }
        else
        {
            valorFormatado = "R$ 0,00";
            cadastroModel.ValorDaConsulta = 0;
        }
    }

    private List<string> HorariosDisponiveis => Enumerable.Range(0, 48)
    .Select(i => TimeSpan.FromMinutes(i * 30).ToString(@"hh\:mm"))
    .ToList();

    private Task OnInicioChanged(string value)
    {
        novoHorario.Inicio = value;

        if (TimeOnly.TryParse(value, out var inicio))
        {
            HorariosFimDisponiveis = HorariosDisponiveis
                .Select(h => TimeOnly.Parse(h))
                .Where(hora => hora > inicio)
                .Select(hora => hora.ToString(@"hh\:mm"))
                .ToList();

            novoHorario.Fim = "";
        }
        else
        {
            HorariosFimDisponiveis = new();
            novoHorario.Fim = "";
        }

        StateHasChanged();
        return Task.CompletedTask;
    }

    private List<string> HorariosFimDisponiveis = new();

    private void AtualizarHorariosFim(ChangeEventArgs e)
    {
        var inicioStr = e.Value?.ToString();
        novoHorario.Inicio = inicioStr;

        if (TimeOnly.TryParse(inicioStr, out var inicio))
        {
            HorariosFimDisponiveis = HorariosDisponiveis
                .Select(h => TimeOnly.Parse(h))
                .Where(hora => hora > inicio)
                .Select(hora => hora.ToString(@"hh\:mm"))
                .ToList();

            novoHorario.Fim = "";
        }
        else
        {
            HorariosFimDisponiveis = new();
            novoHorario.Fim = "";
        }

        StateHasChanged();
    }

    void SalvarCadastro()
    {
        // enviar para API
    }

    void AdicionarHorario()
    {
        if (!string.IsNullOrEmpty(novoHorario.Inicio) && !string.IsNullOrEmpty(novoHorario.Fim) && novoHorario.DiaDaSemana > 0)
        {
            cadastroModel.Horarios.Add(new MeuCadastroHorarioModel
            {
                DiaDaSemana = novoHorario.DiaDaSemana,
                Inicio =novoHorario.Inicio, //TimeOnly.Parse(novoHorario.Inicio),
                    Fim = novoHorario.Fim //TimeOnly.Parse(novoHorario.Fim)
            });

            novoHorario = new(); // limpa inputs
        }
    }

    void RemoverHorario(MeuCadastroHorarioModel horario)
    {
        cadastroModel.Horarios.Remove(horario);
    }

    string ObterNomeDoDia(int dia)
    {
        return dia switch
        {
            1 => "Segunda",
            2 => "Terça",
            3 => "Quarta",
            4 => "Quinta",
            5 => "Sexta",
            6 => "Sábado",
            7 => "Domingo",
            _ => "Desconhecido"
        };
    }
}
