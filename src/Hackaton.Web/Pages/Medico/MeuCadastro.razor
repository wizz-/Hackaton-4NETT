@page "/medico/meu-cadastro"
@using System.Globalization
@using Hackaton.Web.Components.Shared
@using Hackaton.Web.Models.Especialidade
@using Hackaton.Web.Models.Medico
@using Hackaton.Web.Services.Autenticacao
@using Hackaton.Web.Services.Autenticacao.Interfaces
@using Hackaton.Web.Services.Especialidades.Interfaces
@using Hackaton.Web.Services.Medicos.Interfaces

@inject IUsuarioLogadoService UsuarioLogadoService
@inject NavigationManager Navigation
@inject IEspecialidadeService EspecialidadeService
@inject IMedicoService MedicoService

<PageTitle>Meu Cadastro - Health&Med</PageTitle>
<Spinner Exibir="carregando" />

@if (!carregando)
{
    <div class="d-flex align-items-center px-3 py-2 header-bar">
        <div class="me-auto">
            <img src="img/logo-50.png" alt="Health&Med" class="logo-img">
        </div>

        <div class="flex-grow-1 text-center">
            <span class="fw-bold fs-4">Médico - Meu Cadastro</span>
        </div>

        <div class="ms-auto d-flex align-items-center">
            <i class="bi bi-person-circle user-icon me-2 icone-usuario-logado"></i>
            <span class="user-name">@NomeDoMedico</span>
        </div>
    </div>

    <div class="container my-4">

        <div class="row mb-4">
            <div class="col-md-6">
                <label class="form-label">Nome do Médico</label>
                <InputText @bind-Value="CadastroMedicoModel.Nome" class="form-control" disabled />
            </div>
            <div class="col-md-3">
                <label class="form-label">CRM</label>
                <InputText @bind-Value="CadastroMedicoModel.CrmNumero" class="form-control" disabled />
            </div>
            <div class="col-md-3">
                <label class="form-label">Estado (UF)</label>
                <InputText @bind-Value="CadastroMedicoModel.CrmUf" class="form-control" disabled />
            </div>
        </div>

        @if(!gravado)
        {
            <EditForm Model="@CadastroMedicoModel" OnValidSubmit="SalvarCadastro">
                <DataAnnotationsValidator />

                <div class="row mb-4">
                    <div class="col-md-6">
                        <label class="form-label">Especialidade</label>
                        <InputSelect class="form-select" @bind-Value="CadastroMedicoModel.EspecialidadeId">
                            <option value="">Selecione...</option>
                            @foreach (var esp in Especialidades)
                            {
                                <option value="@esp.Id">@esp.Nome</option>
                            }
                        </InputSelect>
                    </div>            
                    <div class="col-md-6">
                        <label class="form-label">Valor da Consulta (R$)</label>
                        <InputText @bind-Value="valorFormatado" class="form-control" @oninput="FormatarValor" />
                    </div>            
                </div>

                <hr />
                <h5 class="mb-3">Disponibilidade Semanal</h5>

                <div class="row g-3 align-items-end mb-3">
                    <div class="col-md-4">
                        <label class="form-label">Dia da Semana</label>
                        <InputSelect TValue="int?" 
                        class="form-select"
                        Value="@novoHorario.DiaDaSemana"
                        ValueChanged="EventCallback.Factory.Create<int?>(this, OnDiaDaSemanaChanged)"
                        ValueExpression="() => novoHorario.DiaDaSemana">
                            <option value="">Selecione...</option>
                            @foreach (var dia in Enumerable.Range(1, 7))
                            {
                                <option value="@dia">@ObterNomeDoDia(dia)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-3">
                        <label class="form-label">Início</label>
                        <InputSelect class="form-select" TValue="string" Value="@novoHorario.Inicio" ValueChanged="@OnInicioChanged" ValueExpression="() => novoHorario.Inicio" disabled="@inicioEstaDesabilitado">
                            <option value="">Selecione...</option>
                            @foreach (var h in HorariosInicioDisponiveis)
                            {
                                <option value="@h">@h</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-3">
                        <label class="form-label">Fim</label>
                        <InputSelect class="form-select" @bind-Value="novoHorario.Fim" disabled="@fimEstaDesabilitado">
                            <option value="">Selecione...</option>
                            @foreach (var h in HorariosFimDisponiveis)
                            {
                                <option value="@h">@h</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-2">
                        <button type="button" class="btn btn-outline-primary w-100" @onclick="AdicionarHorario">
                            <i class="bi bi-plus-circle"></i>
                        </button>
                    </div>
                </div>

                <div class="table-responsive">
                    <table class="table table-sm table-bordered mt-3 tabela-horarios">
                        <thead class="table-light">
                            <tr>
                                @foreach (var dia in Enumerable.Range(1, 7))
                                {
                                    <th class="text-center"><i class="bi bi-calendar-check"></i>@ObterNomeDoDia(dia)</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                @foreach (var dia in Enumerable.Range(1, 7))
                                {
                                    <td>
                                        @foreach (var horarioAtual in CadastroMedicoModel.Horarios.Where(h => h.DiaDaSemana == dia))
                                        {
                                            <div class="input-group input-group-sm horario-badge">
                                            
                                                @* <span class="input-group-text" id="basic-addon2">@horarioAtual.Inicio - @horarioAtual.Fim</span> *@

                                                @if (string.IsNullOrWhiteSpace(horarioAtual.Inicio) || string.IsNullOrWhiteSpace(horarioAtual.Fim))
                                                {
                                                    <span class="input-group-text bg-danger text-white">⚠ Horário inválido</span>
                                                }
                                                else
                                                {
                                                    <span class="input-group-text" id="basic-addon2">@horarioAtual.Inicio - @horarioAtual.Fim</span>
                                                }
                                            
                                                <button class="btn btn-danger" type="button" id="button-addon1" @onclick="() => RemoverHorario(horarioAtual)">
                                                    <i class="bi bi-x-lg"></i>
                                                </button>

                                            </div>                                        
                                        }
                                    </td>
                                }
                            </tr>
                        </tbody>
                    </table>
                </div>

                <div class="mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="bi bi-floppy me-1"></i> Salvar Cadastro
                    </button>
                    <button type="button" class="btn btn-outline-primary ms-2" @onclick="@(() => Navigation.NavigateTo("/medico"))">
                        <i class="bi bi-arrow-left-circle me-1"></i> Voltar
                    </button>
                </div>

                @if (!string.IsNullOrWhiteSpace(mensagemDeErro))
                {
                    <div class="alert alert-danger mt-4" role="alert">
                        <i class="bi bi-exclamation-triangle"></i> @mensagemDeErro
                    </div>
                }

            </EditForm>
        }
        else
        {
            <div class="alert alert-success mt-4" role="alert">
                <i class="bi bi-check-circle"></i> Cadastro salvo com sucesso!
            </div>

            <button type="button" class="btn btn-outline-primary ms-2" @onclick="@(() => Navigation.NavigateTo("/medico"))">
                <i class="bi bi-arrow-left-circle me-1"></i> Voltar
            </button>
        }
    </div>
}
@code {
    private bool gravado = false;
    private string mensagemDeErro = "";

    private bool carregando = true;
    public string NomeDoMedico { get; set; } = "";
    private string valorFormatado = "R$ 0,00";

    public bool inicioEstaDesabilitado { get; set; } = true;
    public bool fimEstaDesabilitado { get; set; } = true;

    private List<EspecialidadeModel> Especialidades = [];
    private EditContext? editContext;
    private MeuCadastroMedicoModel CadastroMedicoModel = new(); 
    private MeuCadastroNovoHorarioModel novoHorario = new();

    private List<string> TodosHorariosDisponiveis => Enumerable.Range(0, 48)
        .Select(i => TimeSpan.FromMinutes(i * 30).ToString(@"hh\:mm"))
        .ToList();

    private List<string> HorariosInicioDisponiveis = new();
    private List<string> HorariosFimDisponiveis = new();    

    protected override async Task OnInitializedAsync()
    {
        carregando = true;        

        try
        {
            var claims = await UsuarioLogadoService.ObterTodasAsClaimsAsync();
            var id = claims.First(x => x.Key == "nameid").Value;
            var medico = MedicoService.ObterMedicoAsync(Convert.ToInt32(id));
            var tarefaEspecialidades = EspecialidadeService.ObterEspecialidadesAsync();

            await Task.WhenAll(medico, tarefaEspecialidades);

            ObterNomeDoMedico(await medico);
            Especialidades = await tarefaEspecialidades;
            CadastroMedicoModel = await medico;
            valorFormatado = CadastroMedicoModel.ValorDaConsulta?.ToString("C", new CultureInfo("pt-BR")) ?? "R$ 0,00";

            editContext = new EditContext(CadastroMedicoModel);
        }
        finally
        {
            carregando = false;
        }
    }

    private void ObterNomeDoMedico(MeuCadastroMedicoModel medico)
    {
        var tokens = medico.Nome.Split(" ");
        NomeDoMedico = $"{tokens[0]} {tokens[^1]}";
    }    

    private void FormatarValor(ChangeEventArgs e)
    {
        var texto = e.Value?.ToString() ?? "0";

        // Remove tudo que não é número
        var numeros = new string(texto.Where(char.IsDigit).ToArray());

        if (decimal.TryParse(numeros, out var valorNumerico))
        {
            // Divide por 100 para ter centavos
            var valorDecimal = valorNumerico / 100m;

            // Atualiza o campo formatado
            valorFormatado = valorDecimal.ToString("C", new CultureInfo("pt-BR"));

            // Armazena no modelo em decimal
            CadastroMedicoModel.ValorDaConsulta = valorDecimal;
        }
        else
        {
            valorFormatado = "R$ 0,00";
            CadastroMedicoModel.ValorDaConsulta = 0;
        }
    }

    private Task OnDiaDaSemanaChanged(int? dia)
    {
        if (dia == null)
        {
            ResetarCamposNovoHorario();            
            return Task.CompletedTask;
        }

        novoHorario.DiaDaSemana = dia;
        novoHorario.Inicio = "";
        novoHorario.Fim = "";
        HorariosFimDisponiveis = new();
        HorariosInicioDisponiveis = new(TodosHorariosDisponiveis);        

        foreach (var horarioSelecionado in CadastroMedicoModel.Horarios.Where(horario => horario.DiaDaSemana == dia))
        {
            HorariosInicioDisponiveis = FiltrarHorariosPorPeriodo(
                HorariosInicioDisponiveis, horarioSelecionado.Inicio, horarioSelecionado.Fim
            );
        }

        fimEstaDesabilitado = true;
        inicioEstaDesabilitado = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private List<string> FiltrarHorariosPorPeriodo(List<string> horariosDisponiveis, string inicioPeriodo, string fimPeriodo)
    {
        if (TimeSpan.TryParse(inicioPeriodo, out TimeSpan inicio) && TimeSpan.TryParse(fimPeriodo, out TimeSpan fim))
        {
            return horariosDisponiveis.Where(horarioStr =>
            {
                if (TimeSpan.TryParse(horarioStr, out TimeSpan horario))
                {
                    return !(horario >= inicio && horario <= fim); 
                }
                return true; 
            }).ToList();
        }

        return horariosDisponiveis;
    }

    private Task OnInicioChanged(string value)
    {
        novoHorario.Inicio = value;
        novoHorario.Fim = "";

        HorariosFimDisponiveis = new(HorariosInicioDisponiveis);
        HorariosFimDisponiveis = FiltrarHorariosPorPeriodo(
            HorariosFimDisponiveis, "00:00", novoHorario.Inicio
        );

        fimEstaDesabilitado = false;
        StateHasChanged();
        return Task.CompletedTask;
    }

    void AdicionarHorario()
    {
        if (!HorarioEhValido()) return;

        var dia = novoHorario.DiaDaSemana!.Value;
        var novoPeriodo = CriarPeriodo(novoHorario);
        var horariosExistentes = ObterHorariosDoDia(dia);
        var conflitos = EncontrarConflitos(novoPeriodo, horariosExistentes);

        if (conflitos.Any())
            FundirHorarios(conflitos, novoPeriodo, dia);
        else
            AdicionarNovoHorario(novoPeriodo, dia);

        OrdenarHorarios();
        ResetarCamposNovoHorario();
    }

    private bool HorarioEhValido()
    {
        return novoHorario.DiaDaSemana is >= 1 and <= 7
            && !string.IsNullOrWhiteSpace(novoHorario.Inicio)
            && !string.IsNullOrWhiteSpace(novoHorario.Fim);
    }

    private (TimeSpan Inicio, TimeSpan Fim) CriarPeriodo(MeuCadastroNovoHorarioModel horario)
    {
        return (TimeSpan.Parse(horario.Inicio), TimeSpan.Parse(horario.Fim));
    }

    private List<MeuCadastroHorarioModel> ObterHorariosDoDia(int dia)
    {
        return CadastroMedicoModel.Horarios
            .Where(h => h.DiaDaSemana == dia)
            .ToList();
    }

    private List<MeuCadastroHorarioModel> EncontrarConflitos((TimeSpan Inicio, TimeSpan Fim) novoPeriodo, List<MeuCadastroHorarioModel> existentes)
    {
        return existentes
            .Where(h =>
            {
                var inicio = TimeSpan.Parse(h.Inicio);
                var fim = TimeSpan.Parse(h.Fim);
                return novoPeriodo.Inicio < fim && novoPeriodo.Fim > inicio;
            })
            .ToList();
    }

    private void FundirHorarios(List<MeuCadastroHorarioModel> conflitos, (TimeSpan Inicio, TimeSpan Fim) novoPeriodo, int dia)
    {
        var menorInicio = Min(novoPeriodo.Inicio, conflitos.Select(c => TimeSpan.Parse(c.Inicio)));
        var maiorFim = Max(novoPeriodo.Fim, conflitos.Select(c => TimeSpan.Parse(c.Fim)));

        foreach (var c in conflitos)
            CadastroMedicoModel.Horarios.Remove(c);

        CadastroMedicoModel.Horarios.Add(new MeuCadastroHorarioModel
            {
                DiaDaSemana = dia,
                Inicio = menorInicio.ToString(@"hh\:mm"),
                Fim = maiorFim.ToString(@"hh\:mm")
            });
    }

    private TimeSpan Min(TimeSpan original, IEnumerable<TimeSpan> outros)
    => new[] { original }.Concat(outros).Min();

    private TimeSpan Max(TimeSpan original, IEnumerable<TimeSpan> outros)
        => new[] { original }.Concat(outros).Max();

    private void AdicionarNovoHorario((TimeSpan Inicio, TimeSpan Fim) periodo, int dia)
    {
        CadastroMedicoModel.Horarios.Add(new MeuCadastroHorarioModel
            {
                DiaDaSemana = dia,
                Inicio = periodo.Inicio.ToString(@"hh\:mm"),
                Fim = periodo.Fim.ToString(@"hh\:mm")
            });
    }

    private void ResetarCamposNovoHorario()
    {
        novoHorario = new();
        HorariosInicioDisponiveis = [];
        HorariosFimDisponiveis = [];
        inicioEstaDesabilitado = true;
        fimEstaDesabilitado = true;
    }

    private void OrdenarHorarios()
    {
        CadastroMedicoModel.Horarios = CadastroMedicoModel.Horarios
            .OrderBy(h => h.DiaDaSemana)
            .ThenBy(h => TimeOnly.Parse(h.Inicio))
            .ToList();
    }

    void RemoverHorario(MeuCadastroHorarioModel horario)
    {
        CadastroMedicoModel.Horarios.Remove(horario);
    }

    string ObterNomeDoDia(int dia)
    {
        return dia switch
        {
            1 => "Segunda",
            2 => "Terça",
            3 => "Quarta",
            4 => "Quinta",
            5 => "Sexta",
            6 => "Sábado",
            7 => "Domingo",
            _ => "Desconhecido"
        };
    }

    private async Task SalvarCadastro()
    {
        if (editContext is null || !editContext.Validate())
        {
            return;
        }

        try
        {
            gravado = false;
            mensagemDeErro = "";
            var requestModel = CriarModelDeRequest();
            await MedicoService.AtualizarCadastroAsync(requestModel);
            gravado = true;
        }
        catch (Exception ex)
        {
            gravado = false;
            mensagemDeErro = ex.Message;
        }        
    }    

    private MedicoMeuCadastroRequest CriarModelDeRequest()
    {
        if (CadastroMedicoModel.ValorDaConsulta is null)
            throw new InvalidOperationException("Valor da consulta não pode ser nulo.");

        return new MedicoMeuCadastroRequest
        {
            Id = CadastroMedicoModel.Id,
            Especialidade = new EspecialidadeDto
            {
                Id = CadastroMedicoModel.EspecialidadeId,
                Nome = ""
            },
            ValorDaConsulta = CadastroMedicoModel.ValorDaConsulta.Value,
            Horarios = CadastroMedicoModel.Horarios
        };
    }
}
