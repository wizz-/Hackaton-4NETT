@page "/medico/agenda"

@using Hackaton.Web.Components.Shared
@using Hackaton.Web.Models.Medico
@using Hackaton.Web.Services.Autenticacao
@using Hackaton.Web.Services.Autenticacao.Interfaces
@using Hackaton.Web.Services.Consultas.Interfaces
@using Hackaton.Web.Services.Medicos.Interfaces

@inject IUsuarioLogadoService UsuarioLogadoService
@inject IMedicoService MedicoService
@inject IConsultaService ConsultaService
@inject NavigationManager Navigation

<PageTitle>Agenda - Próximas Consultas</PageTitle>


<div class="d-flex align-items-center px-3 py-2 header-bar">
    <div class="me-auto">
        <img src="img/logo-50.png" alt="Health&Med" class="logo-img">
    </div>

    <div class="flex-grow-1 text-center">
        <span class="fw-bold fs-4">Agenda - Próximas Consultas</span>
    </div>

    <div class="ms-auto d-flex align-items-center">
        <i class="bi bi-person-circle user-icon me-2 icone-usuario-logado"></i>
        <span class="user-name">@NomeDoMedico</span>
    </div>
</div>

<Spinner Exibir="carregando" />

@if (!carregando)
{
    <div class="container my-4">
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead class="table-light">
                    <tr>
                        <th><i class="bi bi-calendar-event me-1"></i> Data</th>
                        <th><i class="bi bi-clock me-1"></i> Horário</th>
                        <th><i class="bi bi-person me-1"></i> Paciente</th>
                        <th><i class="bi bi-info-circle me-1"></i> Status</th>
                        <th class="text-center"><i class="bi bi-gear me-1"></i> Ações</th>
                    </tr>
                </thead>
                <tbody>
                    @if (!consultas.Any())
                    {
                        <tr>
                            <td colspan="5" class="text-center text-muted py-4">
                                <i class="bi bi-calendar-x fs-4 d-block mb-2"></i>
                                Nenhuma consulta futura encontrada.
                            </td>
                        </tr>
                    }

                    @foreach (var consulta in consultas)
                    {
                        <tr>
                            <td>@consulta.DataFormatada</td>
                            <td>@consulta.Horario</td>
                            <td>@consulta.NomeDoPaciente</td>
                            <td>@consulta.Status</td>
                            <td class="text-center">
                                @if (consulta.Status == "Pendente")
                                {
                                    <button class="btn btn-success btn-sm me-1" @onclick="() => AceitarConsulta(consulta)">
                                        <i class="bi bi-check-lg"></i>
                                    </button>
                                    <button class="btn btn-danger btn-sm" @onclick="() => RejeitarConsulta(consulta)">
                                        <i class="bi bi-x-lg"></i>
                                    </button>
                                }
                                else
                                {
                                    <span class="text-muted">—</span>
                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-4 text-center">
            <button class="btn btn-outline-primary" @onclick="@(() => Navigation.NavigateTo("/medico"))">
                <i class="bi bi-arrow-left-circle me-1"></i> Voltar
            </button>
        </div>
    </div>
}

@code {
    public bool carregando = true;
    public string NomeDoMedico { get; set; } = "";
    private IList<ConsultaMedicoModel> consultas = new List<ConsultaMedicoModel>();

    protected override async Task OnInitializedAsync()
    {
        carregando = true;
        var claims = await UsuarioLogadoService.ObterTodasAsClaimsAsync();
        var id = claims.First(x => x.Key == "nameid").Value;
        var medico = await MedicoService.ObterMedicoAsync(Convert.ToInt32(id));
        consultas = await ConsultaService.ObterConsultasFuturasDoMedicoAsync(medico.Id);
        ObterNomeDoMedico(medico);
        carregando = false;
    }    

    private void ObterNomeDoMedico(MeuCadastroMedicoModel medico)
    {
        var tokens = medico.Nome.Split(" ");
        NomeDoMedico = $"{tokens[0]} {tokens[^1]}";
    }

    private async Task AceitarConsulta(ConsultaMedicoModel consulta)
    {
        await ConsultaService.ConfirmarConsultaAsync(consulta.Id);
        consulta.Status = "Aceita";
    }

    private async Task RejeitarConsulta(ConsultaMedicoModel consulta)
    {
        await ConsultaService.RejeitarConsultaAsync(consulta.Id);
        consulta.Status = "Rejeitada";
    }
}